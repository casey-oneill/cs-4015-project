springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: com.cs4015.bookstore
  pathsToMatch: /**

api:
  common:
    version: 1.0.0
    title: Book Service API
    description: The books service api
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: The book-services is part of cs-4015 project.
    externalDocUrl: casey.oneill@unb.ca
    contact:
      name: Bin Liao, Casey O'Neill, Logan Fitzpatrick, Patrick Moilins, Qihao Guo
      url: https://github.com/casey-oneill/cs-4015-project/issues
      email: https://github.com/casey-oneill/cs-4015-project

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  book-service:
    get-book:
      description: Returns a book json view of the specified book id
      notes: |
        # Normal response
        If the requested book id is found the method will return information regarding:
        1. HARDCOVER book information
        1. PAPERBACK book information
        1. DIGITAL book inforamtion
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        ## Book id 2
        200 - Ok, with a HARCOVER book information.
        ## Non numerical book id
        400 - A **Bad Request** error will be returned
        ## Boook id 1
        404 - A **Not Found** error will be returned
        ## Negative book ids
        422 - An **Unprocessable Entity** error will be returned
    update-book:
      description: Update a book with its book id.
      notes: |
        # Normal response
        If the requested book id is found the method update the book'information from the request body and return the updated book inforamtion:
        1. Updated HARDCOVER book information
        1. Updated PAPERBACK book information
        1. Updated DIGITAL book inforamtion
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        ## Book id 2 with a updated book information.
        200 - Ok, with a updated book information.
        ## Non numerical book id
        400 - A **Bad Request** error will be returned
        ## Boook id 1
        404 - A **Not Found** error will be returned
        ## Negative book ids
        422 - An **Unprocessable Entity** error will be returned
    add-book:
      description: Add a book into the book store database.
      notes: |
        # Normal response
        If the book is successful add into the database, return the book'information:
        1. Updated HARDCOVER book information
        1. Updated PAPERBACK book information
        1. Updated DIGITAL book inforamtion
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        ## Book with proper inforamtion.
        200 - Ok, added book inforamtion.
        ## Upsuppoted book format.
        422 - An **Unprocessable Entity** error will be returned
    delete-book:
      description: Delete a book with its book id.
      notes: |
        # Normal response
        If the requested book id is found, the method delete the book' from the database.
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        ## Book id is exist in the book store.
        200 - Ok.
        ## Non numerical book id
        400 - A **Bad Request** error will be returned
        ## Boook id that is not exist in the database.
        404 - A **Not Found** error will be returned
    get-all-books:
      description: Returns a list of books that exisitng in the database.
      notes: |
        # Normal response
        A list of books found in the bookstore will be return. This request accept pagenation. User could requestion the page number and how many books  in one page.
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        ## Successful to request all books.
        200 - Ok.
        ## Any book request errors.
        422 - An **Unprocessable Entity** error will be returned
  user-service:
    get-user:
      description: Create a user profile and save it into database.
      notes: |
        Create a user profile based on the user inforamtion that provide in the request body. If the user profile is successfully create in the database, return 200 with the user profile info.


server.port: 7001
server.error.include-message: always

# Strongly recommend to set 'ddl-auto' property to "none" in a production environment!
spring:
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
  datasource:
    driverClassName: com.mysql.cj.jdbc.Driver

spring.datasource:
  url: jdbc:mysql://localhost/bookstore_db
  username: user
  password: pwd

spring.datasource.hikari.initializationFailTimeout: 60000

logging:
  level:
    root: INFO
    com.cs4015.bookstore: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

---

spring.config.activate.on-profile: docker

server.port: 8080

spring.datasource:
  url: jdbc:mysql://mysql/bookstore_db
  username: user
  password: pwd
